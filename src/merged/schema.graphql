input ICreatePassenger {
  name: String!
  cellPhone: String
  postalCode: String
  address1: String
  address2: String
  hopeDays: [Int]
}

type CreatePassengerResponse {
  ok: Boolean!
  error: String
}

type Mutation {
  CreatePassenger(passenger: ICreatePassenger!): CreatePassengerResponse!
  DeletePassenger(id: Int!): DeletePassengerResponse!
  EditPassenger(passenger: IEditPassenger!): EditPassengerResponse!
}

type DeletePassengerResponse {
  ok: Boolean!
  error: String
}

input IEditPassenger {
  id: Int!
  name: String!
  cellPhone: String
  postalCode: String
  address1: String
  address2: String
  hopeDays: [Int]
}

type EditPassengerResponse {
  ok: Boolean!
  error: String
}

type GetPassengerResponse {
  ok: Boolean!
  error: String
  passenger: Passenger
}

type Query {
  GetPassenger(id: Int!): GetPassengerResponse!
  GetPassengers(search: ISearch): GetPassengersResponse!
}

input ISearch {
  name: String
  cellPhone: String
  hopeDays: [Int]
}

type GetPassengersResponse {
  ok: Boolean
  error: String
  passengers: [Passenger]
}

scalar Date

type Passenger {
  id: Int
  name: String
  cellPhone: String
  postalCode: String
  address1: String
  address2: String
  hopeDays: [Int]
  createdAt: Date
  updatedAt: Date
}
